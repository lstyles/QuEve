// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuEve.Infrastructure.Data;

namespace QuEve.Infrastructure.Migrations
{
    [DbContext(typeof(EFDbContext))]
    [Migration("20190101233510_Migration002")]
    partial class Migration002
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuEve.Core.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("QuEve.Core.Entities.Alliance", b =>
                {
                    b.Property<int>("AllianceId");

                    b.Property<DateTime>("CachedUntil");

                    b.Property<string>("ETag")
                        .HasMaxLength(255);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Ticker")
                        .HasMaxLength(255);

                    b.HasKey("AllianceId");

                    b.ToTable("Alliances");
                });

            modelBuilder.Entity("QuEve.Core.Entities.Character", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<string>("AccessToken");

                    b.Property<DateTime?>("AccessTokenExpiry");

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("CachedUntil");

                    b.Property<int>("CorporationId");

                    b.Property<string>("ETag")
                        .HasMaxLength(255);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255);

                    b.HasKey("CharacterId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CorporationId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("QuEve.Core.Entities.Corporation", b =>
                {
                    b.Property<int>("CorporationId");

                    b.Property<int?>("AllianceId");

                    b.Property<DateTime>("CachedUntil");

                    b.Property<string>("ETag")
                        .HasMaxLength(255);

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("Ticker")
                        .HasMaxLength(255);

                    b.HasKey("CorporationId");

                    b.HasIndex("AllianceId");

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("QuEve.Core.Entities.Character", b =>
                {
                    b.HasOne("QuEve.Core.Entities.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QuEve.Core.Entities.Corporation", "Corporation")
                        .WithMany("Characters")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("QuEve.Core.Entities.Corporation", b =>
                {
                    b.HasOne("QuEve.Core.Entities.Alliance", "Alliance")
                        .WithMany("Corporations")
                        .HasForeignKey("AllianceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
